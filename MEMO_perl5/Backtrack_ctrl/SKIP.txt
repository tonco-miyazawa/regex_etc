perl5 正規表現の (*VERB:ARG) の動作検証コード集 (*SKIP) 編

[ 動作確認した環境 ]
Perl: perl 5, version 28, subversion 1 (v5.28.1) built for MSWin32-x64-multi-thread
OS: Windows 10 version 1803 64bit

====================================================
(*SKIP) (*SKIP:NAME)             2018/12/29
====================================================

[0001]  perldoc のサンプル 
'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
print "Count=$count\n";
-----結果-----
aaab
aaab
Count=2
--------------


[0002]  分岐の前半で(*SKIP)(*F)すると分岐後半はマッチする？
'1234' =~ /
	\d{3}(*SKIP)(*F)
	|
	\d
	(?{print "\$&=$&\n";})
/x;
-----結果-----
$&=4
--------------
==>  スキップが働き、分岐の後半の \d は 4 にマッチ



[0003]  否定先読みの中で (*SKIP)(*F) すると \d は何にマッチする？
'123456789' =~ /
	(?!123(*SKIP)(*F))
	\d
	(?{print "\$&=$&\n";})
/x;
-----結果-----
$&=1
--------------
==>  この場合はスキップしない



[0004]  ↑の正規表現の最後に (*F) を付けたらどうなる？
'123456789' =~ /
	(?!123(*SKIP)(*F))
	\d
	(?{print "\$&=$&\n";})
	(*F)
/x;
-----結果-----
$&=1
$&=4
$&=5
$&=6
$&=7
$&=8
$&=9
--------------
==>  この場合はスキップする ( 1 の次が 4 になっている)



[0005]  肯定先読みの中に (*SKIP)(*F) を入れたらどうなる？
'1234' =~ /
	(?=\d{3}(*SKIP)(*F))
	|
	\d
	(?{print "\$&=$&\n";})
/x;
-----結果-----
$&=4
--------------
==>  この場合はスキップする



[0006]  肯定先読みの中に (*SKIP) を入れたらどうなる？
'1234' =~ /
	(?=\d{1,3}(*SKIP))
	\d
	(?{print "\$&=$&\n";})
	(*F)
/x;
-----結果-----
$&=1
$&=2
$&=3
$&=4
--------------
==>  この場合はスキップしない



[0007]  ↑の正規表現に分岐を付けたらどうなる？
'1234' =~ /
	(?=\d{1,3}(*SKIP))
	\d
	(*F)
	|
	\d
	(?{print "\$&=$&\n";})
/x;
-----結果-----
$&=1
--------------
==>  この場合もスキップしない
 (?= ) の中まではバックトラックしに行っていない様子



以上


