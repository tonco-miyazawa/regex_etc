======================================================
      callout.c の結果と考察  no.014      2022/06/09-12
======================================================

## line: 250
  test(enc, mp, "(?:a(*MAX{2})|b)*", "abbabbabbabb");


この１行による出力が以下のもの

--------------------------
match at 0
0: (0-6)
--------------------------


1.  この正規表現の縮図

 "abbabbabbabb" =~ /(?:a|b)*/



2.  (*MAX{2})

   これは2回目までの  (*MAX{2})  自身のマッチを許可するが、3回目に試された場合は  (*FAIL)  と同じ動作をする。
  これによりバックトラックが発生し、選択２つ目の "b" を試しに行く。

  マッチ結果が "(0-6)" になっているのは 3つ目の "a" にマッチした直後に  (*MAX{2})  も3回目のマッチを試され、
  (*FAIL)  と同じ動作になった結果、全体マッチが止まるため。



3.  カウント方法   "X"    ">"   "<"

## line: 251
test(enc, mp, "(?:(*MAX{2})a|b)*", "abbabbabbabb")

この１行による出力が以下のもの
---------------------
match at 0
0: (0-6)
---------------------

  line: 250 のものと比べると  (*MAX{2})  が "a" の前に移動している。
  しかし結果は変わっていない。


   (*MAX{2})  が "a" の前にあるため、"a" 以外の文字へのマッチングを試す場合でも一時的に (*MAX{2}) がマッチしてカウントが 1 増える。
  (*MAX{2}) の後ろに続く "a" はマッチに失敗するためバックトラックが発生し、(*MAX{2}) に処理が戻ってきてカウントが 1 減らされる。
  そのため line: 250 のものと結果こそ同じになっているが、マッチングの過程ではカウント数に変化が生じている。


  (*MAX )  の { }  には省略可能な第二引数がある。

 CALLOUTS.BUILTIN.ja : (*MAX )
https://github.com/kkos/oniguruma/blob/ba74cb580a224e8e10f4eae2ee63b4c7e3e86051/doc/CALLOUTS.BUILTIN.ja#L28


  デフォルトの第二引数は "X" であり、 省略せずに書くと  (*MAX{2,X})  となる。

   この第二引数は  (*MAX )  のカウントの数え方を指定するものであり、 "X" はバックトラックによってマッチ失敗に
  なった場合にはカウントが1つ戻されるという数え方をする。

  "X"  の他には ">"  や  "<"  を指定出来る。

   ">"  は  "X" のカウント方法で言えばカウントが1つ増えるときのみカウントする。
  マッチ失敗により1つ減る場合にはカウントされず、1つ減らされることもない。

   逆に "<"  は  "X" のカウント方法で言えば1つ減らされるときにのみカウントする。 ( 正の数でカウントされる )
  つまり、 後に続く正規表現がマッチに失敗し、 バックトラックが発生して  (*MAX )  の所まで戻ってきた回数がカウントされる。

  そのため ">" や "<" が指定された場合には "a" にマッチする回数とカウント数はまったく違う数になる場合が多い。
  これらを使う場合には正規表現エンジンの処理がバックトラックにより、どう行ったりきたりするかを正確に知っておく必要が
  あるかも知れない。 また、それを知るために調査用の道具としてこれらを使うことが出来る。

  このカウント方法は次回以降に出てくる  (*COUNT )  や  (*TOTAL_COUNT )  でも共通である。




## line: 252
test(enc, mp, "(?:(*MAX{1})a|b)*", "bbbbbabbbbbabbbbb");

この１行による出力が以下のもの
---------------------
match at 0
0: (0-11)
---------------------

許可されるマッチ回数が1回になったので2回目の "a" にマッチ出来ずに全体マッチが 11 の位置で止まっている。
ちなみに {0} や {-10000} にすると "a" は1回もマッチ出来なくなり、 "b*" と同じ動作になる。


数字の下限
{-9223372036854775807}   =>   数字として認識される。 {0}  と同じ動作をする。
{-9223372036854775808}   =>   エラー。 この数字は 2 の 63 乗 x (-1)。


数字の上限
{9223372036854775807}   =>   数字として認識される。
{9223372036854775808}   =>   エラー。 この数字は 2 の 63 乗。




## line: 253
test(enc, mp, "(?:(*MAX{3})a|(*MAX{4})b)*", "bbbaabbab");

この１行による出力が以下のもの
---------------------
match at 0
0: (0-6)
---------------------

この正規表現では "a" は3回目まで、 "b" は4回目までのマッチまでが許可される。
そのため、 5回目の "b" の直前で全体マッチが止まっている。


(*MAX{3})  と  (*MAX{4})  は別々の存在であり、カウントも別々に行われる。
これは人間で言えば双子のようなもので、見た目はそっくりだが別々の存在である。

双子でも名前が違うように、これらにも別々の名前を付けて識別出来るようになっている。
それが  "[tag]"  なのだがそれは次回に登場する。




 おわり



