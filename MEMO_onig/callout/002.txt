===========================================================
   callout.c の結果と考察  no.002    2022/02/27 - 2022/03/02
===========================================================

## line: 236
  test(enc, mp, "(?{{!{}#$%&'()=-~^|[_]`@*:+;<>?/.\\,}}[symbols])c", "abc");


この１行による出力が以下のもの


-----------------------------------------------------
CONTENTS PROGRESS: contents: "!{}#$%&'()=-~^|[_]`@*:+;<>?/.\,", start: "c", current: "c"
user_data: something data
stack: used_num: 1, used_bytes: 32
match at 2
0: (2-3)
-----------------------------------------------------


1.  この正規表現の縮図
 "abc" =~ /c/


2. (?{{!{}#$%&'()=-~^|[_]`@*:+;<>?/.\\,}}

  これは contents: の中に "{" や "}" を含められるように
  するために { } の囲いを二重にしている、以下の解説を参照

  /doc/RE.ja  の "<呼び出し>"
  https://github.com/kkos/oniguruma/blob/master/doc/RE.ja#L335

  contents: の中身は "{" から始まってはいけない
  (?{{{}}  として実行したら以下のエラーが出た
   ---------------------------
   COMPILE ERROR: -227: invalid callout pattern
   ---------------------------

  contents: の中身を "}" で終わらせた場合も同じエラーが出た
  (?{{}}}   => エラー
  (?{{a}}}  => エラー
  (?{{}a}}  => 正常動作

  contents を閉じる "}" の数以上の "}" の連続はエラーになるが
  "{" の連続は contents の先頭以外なら許される

  (?{a}}}}}}b}  => エラー
  (?{a{{{{{{b}  => 正常動作

  何重までの囲いが許されるかを試したところ、"{" と "}" がそれぞれ10万重に
  なったあたりでテキストエディタのほうがギブアップしてしまった


3.  contents の中の "\\"
  C言語の "" の中で "\" を書く場合、エスケープを付けて "\\" にする


4.  [symbols]
  タグ名として symbols という名を付けている


5.  start: "c",
  検索開始位置が a や b の前からではマッチしないので
  検索開始位置が進められ、start: が "c" になっている
  マッチしない検索開始位置からの結果は出力されていない


6.  current: "c"
  current: が "c" なのは (?{text}) が正規表現の先頭にあり、
  この時点では検索対象文字列 "abc" の "c" がまだ消費されていないため

  つまり、(?{text}) が正規表現の中のどこに位置するかで結果が変わる


7.  match at 2
  マッチしたときの検索開始位置
  検索対象文字列の先頭は "0" 、1文字目の後ろは "1"


8.  0: (2-3)
  0: は全体のマッチ領域、perl5 で言うと $& の領域
  1: は1つ目のキャプチャ領域、perl5 で言うと $1 の領域
  2: は2つ目のキャプチャ領域、perl5 で言うと $2 の領域

  (2-3) はマッチ領域の開始位置と終了位置
  検索対象文字列の先頭は "0" 、1文字目の後ろは "1"



--------------------------------------------

 おわり


