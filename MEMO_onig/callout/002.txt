======================================================
      callout.c の結果と考察  no.002      2022/02/27
======================================================

## line: 236
  test(enc, mp, "(?{{!{}#$%&'()=-~^|[_]`@*:+;<>?/.\\,}}[symbols])c", "abc");


この１行による出力が以下のもの



CONTENTS PROGRESS: contents: "!{}#$%&'()=-~^|[_]`@*:+;<>?/.\,", start: "c", current: "c"
user_data: something data
stack: used_num: 1, used_bytes: 32
match at 2
0: (2-3)



-----------------------------------------------------
  以下、現時点での解釈 (間違ってる可能性あり)
-----------------------------------------------------


1. (?{{!{}#$%&'()=-~^|[_]`@*:+;<>?/.\\,}}

  これは contents: の中に "{" や "}" を含められるように
  するために {} を二重にしている

  /doc/RE.ja  の "<呼び出し>" を参照
  https://github.com/kkos/oniguruma/blob/master/doc/RE.ja#L335

  contents: の中身は "{" から始まってはいけない
  (?{{{}}  として実行したら以下のエラーが出た

  COMPILE ERROR: -227: invalid callout pattern


  contents: の中身を "}" で終わらせても同じエラーが出た
  (?{{}}}   => エラー
  (?{{a}}}  => エラー
  (?{{}a}}  => 正常動作

  contents を閉じる "}" の数以上の "}" の連続はエラーになるが
  "{" の連続は contents の先頭以外なら許される
  
  (?{a}}}}}}b}  => エラー
  (?{a{{{{{{b}  => 正常動作


  \\ はC言語の "" の中に \ を書くためのエスケープ



2.  [symbols]

  タグ名として symbols という名を付けている



3.  start: "c",

  検索開始位置が a や b の前からではマッチしないので
  検索開始位置が進められ、start: が "c" になっている
  マッチしない検索開始位置からの結果は出力されていない



4.  current: "c"
  current: が "c" なのは (?{abc}) が正規表現の先頭にあり、
  この時点では検索対象文字列 "abc" の "c" がまだ消費され
  ていないため。 つまり (?{abc}) が正規表現の中のどこに
  位置するかで結果が変わる。



5.  match at 2

  マッチしたときの検索開始位置
  検索対象文字列の先頭は "0" 、1文字目の後ろは "1"



6.  0: (2-3)

  0: は全体のマッチ領域、perl5 で言うと $& の領域
  1: は1つ目のキャプチャ領域、perl5 で言うと $1 の領域
  2: は2つ目のキャプチャ領域、perl5 で言うと $2 の領域

 (2-3) はマッチ領域の開始位置と終了位置
  検索対象文字列の先頭は "0" 、1文字目の後ろは "1"



--------------------------------------------

 おわり


