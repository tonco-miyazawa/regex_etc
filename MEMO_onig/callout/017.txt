======================================================
      callout.c の結果と考察  no.017      2022/11/30
======================================================

## line: 256
  test(enc, mp, "(?:(*MAX[T]{3})a)*(?:(*MAX{T})c)*", "aaccc");


この１行による出力が以下のもの

--------------------------
match at 0
0: (0-4)
--------------------------


1.  この正規表現の縮図

 "aaccc" =~ /(?:a)*(?:c)*/



2.  (*MAX{T})

   上限のマッチ回数を指定する  { }  の中身が  (*MAX[T]{3})  のタグ名である  "T"  になっている。
  (*MAX{T})  が試されると、 その時点での  (*MAX[T]{3})  のマッチ回数が参照され、 その数字が
  (*MAX{T})  の上限として設定される。


  検索対象文字列は  "aaccc"  なので、 まず  "a"  が2個マッチする。
  これにより  (*MAX[T]{3})  のマッチ回数は  "2"  となり、 (*MAX{T})  は  (*MAX{2})  として動作することになる。

  "ccc" に対し  (?:c)*  が試され、 上限が  "2"  なので  "cc"  までのマッチとなる。
  全体マッチは 0 の位置から 4 の位置までとなる。




3.  検索対象文字列を "aaccc" から "ccc" に書き換えてテスト


  test(enc, mp, "(?:(*MAX[T]{3})a)*(?:(*MAX{T})c)*", "ccc");

  結果
  --------------------------
  match at 0
  0: (0-0)
  --------------------------

  "a"  に1回もマッチ出来ないため  (*MAX[T]{3})  のマッチ回数は  "0"  となり、  (*MAX{T})  の上限も  "0"  となる。
  ゆえに1回もマッチすることが許されなくなり、 "*" による繰り返しは "0" 回のマッチに成功する。

  全体としてのマッチは 0 の位置から 0 の位置まで、 すなわち空文字列  ""  にマッチする。




おわり



