======================================================
      callout.c の結果と考察  no.007      2022/04/08
======================================================

## line: 243
  test(enc, mp, "abc(?:(*FAIL)|$)", "abcabc");



この１行による出力が以下のもの


-------------------
match at 3
0: (3-6)
-------------------


1. この正規表現の縮図

 "abcabc" =~ /abc(?:(*FAIL)|$)/



2. "0: (3-6)"

  検索対象文字列の２つ目の "abc" にマッチしている。
 ..ということは選択の後者を通ってマッチしている。



3. "(*FAIL)"

  この (*FAIL) は oniguruma にあらかじめ組み込まれている関数。
なので (*foo) とは違い、callout.c では定義されていない。


組み込み関数の説明は以下のdocを参照。

CALLOUTS.BUILTIN.ja
https://github.com/kkos/oniguruma/blob/master/doc/CALLOUTS.BUILTIN.ja


組み込み関数は大文字で定義されているので自分で定義する関数には小文字を使ったほうが良い。



4. perldoc.jp

 (*FAIL) はperl5の特殊なバックトラック制御記号 (*VERB:ARG) の中の１つ。


perldoc: 特殊なバックトラック制御記号
https://perldoc.jp/docs/perl/5.26.1/perlre.pod#Special32Backtracking32Control32Verbs


perldoc では  "(?!) と等価ですが" と書いてあるので "(?!)" だと思って使えば良さそう。

=> 強制的に即、全体マッチを失敗させるモノではない。



5. 自分で書いたテスト


・ 繰り返しの後ろに (*FAIL)
-----------------------
test(enc, mp, "\\A.*(*FAIL)", "abcdef");
-----------------------
結果: search fail


・ 先読みの中に (*FAIL)
-----------------------
test(enc, mp, "(?!(*FAIL))", "abcdef");
-----------------------
結果:
-----------------------
match at 0
0: (0-0)
-----------------------

=> ２つとも "(?!)" と変わらない動作をしている。



6. "(*F)"

  perl5 では "(*F)" とも書けるので一応テスト

-----------------------
test(enc, mp, "(*F)", "abcdef");
-----------------------

結果： COMPILE ERROR: -229: undefined callout name

=> 現行の oniguruma ver6.9.7.1 では "(*F)" は使えない。




 おわり



