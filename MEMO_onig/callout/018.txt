======================================================
      callout.c の結果と考察  no.018      2023/04/13
======================================================

## line: 259
  test(enc, mp, "\\A(?(?{in condition})then|else)\\z", "then");



この１行による出力が以下のもの

--------------------------
CONTENTS PROGRESS: contents: "in condition", start: "then", current: "then"
user_data: something data
stack: used_num: 3, used_bytes: 96
match at 0
0: (0-4)
--------------------------


1.  この正規表現の縮図

 "then" =~ /\A(?(条件式)then|else)\z/



2.  条件式

   条件式には内容呼び出しの  (?{in condition})  が入れられている。
  出力結果を見ると "then" にマッチしているので条件式の判定は "真" となっている。



3.  "CONTENTS PROGRESS: "

  この内容呼び出しには方向指定文字が付いていないのでデフォルトの動作である
  "前進中のみ" 呼び出しが行われる。



4.  検索対象文字列を "else"  に書き換えてテスト

  test(enc, mp, "\\A(?(?{in condition})then|else)\\z", "else");

  この１行による出力が以下のもの

  --------------------------
  CONTENTS PROGRESS: contents: "in condition", start: "else", current: "else"
  user_data: something data
  stack: used_num: 3, used_bytes: 96
  search fail
  --------------------------

  条件式の判定が "真" となるので "偽" のほうのマッチは試されず、 全体マッチに失敗している。




5.  条件式として内容呼び出しを入れた場合の真偽の決まり方

    条件式の判定は中に入れられた正規表現がマッチに成功すれば "真"、 マッチ失敗なら "偽" となる。
  つまり、 内容呼び出し自身のマッチに成功すれば条件式は "真" となり、 内容呼び出し自身の
  マッチに失敗すれば条件式は "偽" となる。




6.  内容呼び出し自身のマッチング


  内容呼び出し自身がマッチするか否かは次の２つの要素によって決まる。


    ----------------------------
    (1)  呼び出し関数の戻り値

    (2)  内容呼び出しの方向指定子
    ----------------------------


  (1) については  /doc/CALLOUTS.API.ja  にて以下のように説明されている。



  ---------------------- CALLOUTS.API.ja -----------------------

    * 呼び出し関数の戻り値 (int)

      ONIG_CALLOUT_FAIL (== 1):     失敗
      ONIG_CALLOUT_SUCCESS (== 0):  成功
      -1未満:                       エラーコード (検索/照合の終了)

      ONIG_CALLOUT_FAIL/SUCCESSは、後退中の呼び出しでは無視される。
      後退は失敗の回復過程なので。
  --------------------------------------------------------------



  補足すると、 呼び出し関数が戻り値として  "ONIG_CALLOUT_FAIL"  を返したとき、 
  内容呼び出しは自身のマッチに失敗する。  つまり、  (?!)  や  (*FAIL)  のような働きをする。

  逆に、 "ONIG_CALLOUT_SUCCESS"  を返したとき、 内容呼び出しは自身のマッチに成功する。


  /sample/callout.c では以下の２か所で呼び出し関数の戻り値を指定している。

  関数 callout_body() の返り値
  https://github.com/kkos/oniguruma/blob/078f95efd45ef5e266b67307e6b3c5ffc3de38ab/sample/callout.c#L57
  
  関数 bar() の返り値
  https://github.com/kkos/oniguruma/blob/078f95efd45ef5e266b67307e6b3c5ffc3de38ab/sample/callout.c#L119



    次に (2)  の "内容呼び出しの方向指定子"  について

  内容呼び出しに方向指定子が付けられている場合、 その方向に合致する場合にしか
  呼び出し関数は呼ばれない。
  呼び出し関数が呼ばれないということは呼び出し関数の戻り値も返されない。

  呼び出し関数の戻り値が返されないということは "ONIG_CALLOUT_FAIL" や
  "ONIG_CALLOUT_SUCCESS" を戻り値として指定してあったとしてもこれらは参照されない。
  この場合、 内容呼び出し自身のマッチは必ず成功する。

  ここで気を付けるべきことは、

  「 "ONIG_CALLOUT_FAIL" が指定されている内容呼び出しは自身のマッチに
  必ず失敗するわけではなく、 方向指定子によってはマッチに成功する場合もある 」

  ということ。 うっかりミスの原因にならないよう気を付けたい。



  例えば、  方向指定子として  "<"  が指定されている内容呼び出しは戻り値として
 "ONIG_CALLOUT_FAIL" が指定されていたとしても自身のマッチに成功する。

  内容呼び出し自身がマッチするかどうかは前進中にのみ試されるが、 方向指定子は
  後退中にのみ呼び出しを行う  "<"  が指定されているので前進中に戻り値は返されず、
  自身のマッチは成功する。

  また、 処理が後退中に内容呼び出しに到達したときには呼び出し関数の呼び出しは行われるが
  戻り値は使われない。  後退中なので内容呼び出し自身がマッチするかどうかは試されないため。




おわり



