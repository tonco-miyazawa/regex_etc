======================================================
      callout.c の結果と考察  no.015      2022/06/11
======================================================

## line: 254
  test(enc, mp, "(?:(*MAX[A]{3})a|(*MAX[B]{5})b)*(*CMP{A,<,B})", "abababc");


この１行による出力が以下のもの

--------------------------
match at 1
0: (1-6)
--------------------------


1.  この正規表現の縮図

 "abababc" =~ /(?:a|b)*/



2.  [A] と [B]

   (*MAX[A]{3})   =>   (*MAX{3})  に  "A"  という識別用の名前を付けたもの。

   (*MAX[B]{5})   =>   (*MAX{5})  に  "B"  という識別用の名前を付けたもの。

   この名前のことを "tag" と呼ぶ。



3.  (*CMP{A,<,B})

   これは以下の条件を満たした場合のみ (*CMP{A,<,B})  自身のマッチに成功する。

  -------------------------------------------------------------------------
    (*MAX[A]{3}) のマッチ回数  <   (*MAX[B]{5}) のマッチ回数
  -------------------------------------------------------------------------

  この "マッチ回数" とは (*CMP{A,<,B})  が試された時点での [A] と [B] のマッチ回数を指す。
  この条件を満たさない場合は  (*FAIL)  と同じ動作になり、バックトラックを発生させる。

  この条件より、 "b" にマッチした回数が "a" にマッチした回数より多い場合でないと  (*CMP{A,<,B})  のマッチは成功しない。

 CALLOUTS.BUILTIN.ja : (*CMP )  の説明
 https://github.com/kkos/oniguruma/blob/316ee632e26cd71acfa65e2cdb93a603a147d05a/doc/CALLOUTS.BUILTIN.ja#L79



4.  0: (1-6)

     対象テキストは "ababab" という順で始まっており、先頭の位置からの検索では "a" が先にマッチするため、
   "a" が "b" よりもマッチ回数が少なくなることは無い。
   そのため先頭の位置からの検索では  (*CMP{A,<,B})  のマッチは成功しない。

  検索開始位置が１つ進み、1 の位置から検索が始まると今度は "b" が先にマッチするので  {A,<,B}  の条件を満たす場面がある。
  繰り返しにより 6 の位置まで到達した時点ではマッチ回数が A=2, B=3 になっているので  (*CMP{A,<,B})  は条件を満たし、
  全体マッチに成功する。 このため結果は (1-6) になる。



5.  (*MAX )

  今回のテストコードでは (*MAX ) がマッチ回数の上限に到達して  (*FAIL)  の動作になる場面は [A] , [B] ともにない。
  このマッチ回数の上限がいらない場合にはこれの代わりに  (*COUNT )  を使うことが出来る。

  CALLOUTS.BUILTIN.ja :  (*COUNT )  の説明
  https://github.com/kkos/oniguruma/blob/316ee632e26cd71acfa65e2cdb93a603a147d05a/doc/CALLOUTS.BUILTIN.ja#L43


  ##  line: 254 のテストコードの (*MAX )  を  (*COUNT )  で代用したコード
  ------------------------------------
  test(enc, mp, "(?:(*COUNT[A]{X})a|(*COUNT[B]{X})b)*(*CMP{A,<,B})", "abababc");
  ------------------------------------

  この１行による出力が以下のもの

  --------------------------
  match at 1
  0: (1-6)
  --------------------------

  結果が  line: 254 のテストコードと同じになっている。 =>  (*COUNT )  での代用成功


  (*COUNT )  の { }  の中身が "X" になっている点に注意。  (*COUNT )  の { } の中ではカウント方法を指定をするが、
  (*COUNT ) のカウント方法がデフォルトでは ">" なのに対し、 (*MAX )  のカウント方法はデフォルトでは "X" なので
  (*MAX )  の代用として (*COUNT )  を使いたい場合には (*MAX ) と同じカウント方法を指定しなければならない。

  (*MAX ) のデフォルトのカウント方法:  "X"
  (*COUNT ) のデフォルトのカウント方法:  ">"
  (*TOTAL_COUNT ) のデフォルトのカウント方法:  ">"




おわり



