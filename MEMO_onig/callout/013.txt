======================================================
      callout.c の結果と考察  no.013      2022/06/01
======================================================

## line: 248
  test(enc, mp, "ab(*bar{1234567890})", "abc");


この１行による出力が以下のもの


--------------------------
bar called.
arg[0]: 1234567890
arg[1]: 'I am a option argument's default value.'
arg[2]: 0x004422
match at 0
0: (0-2)
--------------------------


1.  この正規表現の縮図

 "abc" =~ /ab/



2.  arg[0]: 1234567890

 (*bar) の {} 内 に書かれた唯一の引数が arg[0] の値として出力されている。



3.  arg[1]  と  arg[2]

これらの値はコード上で設定されたデフォルトの値が出力されている。

 "I am a option argument's default value." を設定しているコード
https://github.com/kkos/oniguruma/blob/d484916f3ca2b6bbc81accba63054625dfe26b6b/sample/callout.c#L209

 0x4422 を設定しているコード
https://github.com/kkos/oniguruma/blob/d484916f3ca2b6bbc81accba63054625dfe26b6b/sample/callout.c#L212


これらが設定された opt_defaults は引数の１つとして onig_set_callout_of_name() 関数に渡される。

opt_defaults がonig_set_callout_of_name() 関数に渡されるコード
https://github.com/kkos/oniguruma/blob/d484916f3ca2b6bbc81accba63054625dfe26b6b/sample/callout.c#L214




4. onig_set_callout_of_name() 関数

CALLOUTS.API.ja にこの関数の説明がある。
https://github.com/kkos/oniguruma/blob/d484916f3ca2b6bbc81accba63054625dfe26b6b/doc/CALLOUTS.API.ja#L98


  ＜ この関数のポイント ＞

  ● "正規表現の中で使われる名前"  と  "コード上の関数の名前"  を同じにする必要はない。
    それぞれ任意の名前を設定可能。 前者は 3, 4番目の引数で設定し、 後者は 6 番目の引数で設定する。


  ●  名前呼び出しの引数に関する設定は onig_set_callout_of_name() 関数の引数の中の
    8, 9, 10, 11 番目で設定する。

    8 番目:  6番目の引数で指定した関数に渡す引数の数。 今回のテストコードでは "3" が設定されている。
                 しかし正規表現の中では引数は１つしか記述されていないので引数が２つ足りない。
                 この足りない分は 10, 11 番目で設定するオプション引数によって穴埋めされる。

    9 番目:  6番目の引数で指定した関数に渡す引数の型を配列で設定する。
                 今回のテストコードでは引数が３つなので３つ分の型を配列で設定している。


   10番目:  オプション引数の数。 今回のテストコードでは引数が２つ足りないのでそれを穴埋めするために
               "2" を設定している。 オプション引数の数が足りずに穴埋めし切れない場合はエラーが出る。
               逆にオプション引数が余る場合は余ったオプション引数が使われないだけでエラーは出ない。

   11番目:  オプション引数のそれぞれのデフォルトの値を配列で設定する。
               オプション引数の要素が穴埋めに使われる場合には 9 番目の引数で設定された型と一致しなければならない。



  ●   [重要]  オプション引数による穴埋めについて

   "8 番目の引数によって設定された引数の数"  と比べて  "正規表現の中で記述された引数の数"  が少ない場合、
   オプション引数による穴埋めが行われる。

    例えば、 引数の数が "5" に設定されていて正規表現の中の引数が１つしか無かった場合、４つ分の引数の
   穴埋めが行われる。  2つ目の引数はオプション引数の [0] で穴埋めされる。 3つ目の引数は [1] で穴埋め。
   ..という具合に [0] から [3] までの４つの要素で穴埋めされる。

   ここで気を付けなければならないのは穴埋めは必ず [0] から始まるということ。
   2つ目の引数の穴埋めだからと言ってオプション引数の2番目の添え字である [1] で穴埋めされる訳ではない。

   そのため、正規表現の中の引数を１つ増やすと穴埋めに使われるオプション引数の要素が１つずつズレる。
   ズレたことによって設定した型と違う型のオプション引数で穴埋めされてしまってエラーになる、等の影響が出るので
   正規表現の中の引数の数には気を付けなければならない。



  ● 3 番目の引数である "正規表現の中で使う名前" には全角文字は使えない

   >  3 name:        名前のアドレス (encでエンコーディングされている文字列)

   指定された enc でエンコーディングされていればアスキー文字以外も使えるかも知れないと思って
   UTF-8 で記述されたコード上で名前を "あ" にしてみたが以下のエラーが出た。

   > ERROR: fail to set callout of name: あ
   > COMPILE ERROR: -228: invalid callout name

  更に調べると名前の先頭を数字の "0" にした場合ですらエラーが出ることが分かった。



  ●  名前呼び出し foo の引数の設定

   foo の onig_set_callout_of_name() 関数
  https://github.com/kkos/oniguruma/blob/d484916f3ca2b6bbc81accba63054625dfe26b6b/sample/callout.c#L197

  名前呼び出しの引数に関する設定をする 8, 9, 10, 11 番目の引数はすべて "0" が設定されている。
  名前呼び出しで引数を使わない場合は "0" を設定しておけば良いということ。



 おわり



