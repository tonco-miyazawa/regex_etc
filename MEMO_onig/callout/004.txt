==========================================================
  callout.c の結果と考察  no.004    2022/02/28 - 2022/03/02
==========================================================

## line: 238
  test(enc, mp, "\\A(?!a(?{in prec-read-not}[xxx]X)b)", "ac");


この１行による出力が以下のもの

-------------------
CONTENTS PROGRESS: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 3, used_bytes: 96
CONTENTS RETRACTION: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 3, used_bytes: 96
match at 0
0: (0-0)
-------------------


1.  この正規表現の縮図
  "ac" =~ /\A(?!ab)/


2.  (?!a(?{in prec-read-not}[xxx]X)b)

 これは (?{text}) を否定先読みの中に置いたテスト
 (?{text}) の後ろに "b" があるため後退が発生する


3.  used_num: 3
 used_num が "3" になってる以外は通常時と変わらず
 先読みの内側と外側で stack が２つ必要になるのは分かるが
 ３つ目が作られる理由は分からない


4.  (?{text}X)
  "X" は "方向指定文字" で "前進中および後退中" を指定している
  
  このオプションを省略すると "前進中のみ" が指定される
  つまり ">" を指定したい場合は省略可能

  <呼び出し>
  https://github.com/kkos/oniguruma/blob/master/doc/RE.ja#L321




■■ 実験１■■  /\A(?!ab)/  を  /\A(?!ac)/  に書き換えて実験

  test(enc, mp, "\\A(?!a(?{in prec-read-not}[xxx]X)c)", "ac");


-------------------
CONTENTS PROGRESS: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 3, used_bytes: 96
search fail
-------------------

5.  CONTENTS PROGRESS
 (?!ac) によって全体マッチは失敗するが
 (?!ac) の内側ではテキスト "ac" に対して "ac" のマッチを試すため
 後退は発生していない


6.  used_num: 3
 used_num が "3" になってる他は通常時と変わりなし
 全体マッチの成否は used_num に影響しないように見える




■■ 実験２■■  /\A(?!ab)/  を  /\A(?=ab)/  に書き換えて実験

  test(enc, mp, "\\A(?=a(?{in prec-read-not}[xxx]X)b)", "ac");


-------------------
CONTENTS PROGRESS: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 2, used_bytes: 64
CONTENTS RETRACTION: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 2, used_bytes: 64
search fail
-------------------


7.  全体マッチは失敗する
  テキスト "ac" に対して \A(?=ab)  はマッチしない
  後ろにある "b" によって (?{text}) は後退に遭遇する


8.   used_num が "2" に減った
 否定先読みにはマッチの成否を反転させるための
 stack が１つ余計に必要になるのだろうか？




■■ 実験３■■  /\A(?!ab)/  を  /\A(?=ac)/  に書き換えて実験

  test(enc, mp, "\\A(?=a(?{in prec-read-not}[xxx]X)c)", "ac");

-------------------
CONTENTS PROGRESS: contents: "in prec-read-not", start: "ac", current: "c"
user_data: something data
stack: used_num: 2, used_bytes: 64
match at 0
0: (0-0)
-------------------


1.  全体マッチは成功している
 先読みの内側ではテキスト "ac" に対して "ac" のマッチを試すので後退は発生しない


2.  used_num は "2" だが他は通常時と変わらない
 これも肯定先読みだから否定先読みよりも１つ少ない？


--------------------------------------------

 おわり



