==============================================================

     (?~abc)  に想定外であろうゼロ幅マッチを入れてみた

                   tonco-miyazawa    2021/12/22 - 2022/03/03
==============================================================


言葉の上では  "\b を含まない文字列"  を意味する  (?~\b) を
 "1" と ":" の間に置いて  /1(?~\b):/  という正規表現を作る

この正規表現はテキスト "1:" にマッチする？ それともしない？

..という訳で実験だ！



■ oniguruma 6.9.7

/sample/simple.c  の 17,18行目を書き換えて実験

検索表現： 1(?~\\b):
対象テキスト： 1:

結果=>  1:  にマッチした



■ Onigmo 6.2.0

これは Onigmo に存在する非包含オペレータのバグの影響を受けない
中に入っている  "\b"  はマッチする文字数が "0" で不変だからだ

string = "1:"
puts string.sub( /1(?~\b):/, '<match>')

結果=>  マッチせず




■ Perl5  5.32.1       先読みを使った疑似非包含

$str = "1:";
$str =~ s/1(?:(?!\b).)*:/<match>/;

結果=>  1:  にマッチ




■■■■■ 結論 ■■■■■

■  perl5
perl5版は書き方による仕様であることは明らか
０回の繰り返しでもマッチしてしまうためゼロ幅マッチを防げない


■  oniguruma
いろいろ試したところ、oniguruma は  (?~abc)  がマッチする
領域の右端の位置では弾くべきゼロ幅マッチがあっても弾けず
マッチしてしまうようだ

これは perl5版の疑似非包含も持つ特徴だ
oniguruma の (?~abc) と perl5版の疑似非包含は動作がとても
似ているので perl5版に慣れている人には使いやすいはず


■  Onigmo
Onigmo の非包含オペレータはゼロ幅マッチ対応！ 拍手～！

ただし、中に入れる正規表現によっては下記のバグを考慮する
必要があるので要注意だ

Onigmo の非包含オペレータのバグを再現する方法
https://github.com/tonco-miyazawa/regex_etc/blob/master/MEMO_Onigmo/bug_absence.txt


-----------------------------------------------------

おわり


